base-015：

memcached

memcached虽然能够通过分布式缓存，实现其中memcached宕掉不会丢失全部缓存数据，但部分数据还是难逃一劫。

我们可以利用magent代理memcached实现主从备份来保证缓存数据完好无损，而且magent还可以作为从继续使用，但大体工作原理如下：

1.magent每次写数据都会写到主memcached和从memcached上，并且向主从memcached写的算法一样；
2.当主memcached宕掉，magent会向从memcached中读取数据；
3.当主memcached恢复后，magent将重新向主memcached中读数据；此时由于主memcached刚恢复，其中并无数据，因此会导致部分数据无法读取，这也是magent的一大缺点。

针对magent的缺点有几种想法：
1.在生产环境中主memcached宕掉的可能性非常小，大部分时间都是工作的；而从memcached只是在主memcached宕掉后才使用，因此从memcached分配的空间不可能和主memcached一样，这样无疑是在浪费宝贵的内存空间。
2.既然从memcached分配空间较小，而随着存入的数据会越来越多，会导致缓存的数据不断被过期驱逐出内存，因此在主memcached宕掉后，只能暂时起到缓解数据库压力的作用。
3.主memcached宕掉后，不宜直接将其启动，还是在数据库压力比较小的时候再启动吧，就当预热缓存。

总结：我引入magent除了主从方面，还考虑到magent---magent实现memcached入口的负载均衡，也就是说读写请求按照一定的算法分配到两个magent入口上，既能达到高可用，还能起到负载均衡。
